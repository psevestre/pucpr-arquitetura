package br.pucpr.examples.inventory.stock.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StockItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockItemAllPropertiesEquals(StockItem expected, StockItem actual) {
        assertStockItemAutoGeneratedPropertiesEquals(expected, actual);
        assertStockItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockItemAllUpdatablePropertiesEquals(StockItem expected, StockItem actual) {
        assertStockItemUpdatableFieldsEquals(expected, actual);
        assertStockItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockItemAutoGeneratedPropertiesEquals(StockItem expected, StockItem actual) {
        assertThat(actual)
            .as("Verify StockItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockItemUpdatableFieldsEquals(StockItem expected, StockItem actual) {
        assertThat(actual)
            .as("Verify StockItem relevant properties")
            .satisfies(a -> assertThat(a.getSku()).as("check sku").isEqualTo(expected.getSku()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getAvailable()).as("check available").isEqualTo(expected.getAvailable()))
            .satisfies(a -> assertThat(a.getReserved()).as("check reserved").isEqualTo(expected.getReserved()))
            .satisfies(a -> assertThat(a.getMinStock()).as("check minStock").isEqualTo(expected.getMinStock()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockItemUpdatableRelationshipsEquals(StockItem expected, StockItem actual) {
        // empty method
    }
}
